:markdown

  ##Options

  These are the default options (default `.pleeeaserc` file):

  ```javascript
  {
    "in": ["*.css"],
    "out": "app.min.css",

    "fallbacks": {
      "autoprefixer": true,
      "variables": true,
      "filters": true,
      "rem": true,
      "pseudoElements": true
    },
    "optimizers": {
      "import": true,
      "minifier": true,
      "mqpacker": true
    },

    "sourcemaps": false
  }
  ```

  All options can be disabled with the `false` keyword or modified using each postprocessor options. See each options:

  * [in, out](tool.html#configuration-file)
  * fallbacks: [autoprefixer](#fallbacks-autoprefixer), [variables](#fallbacks-variables), [filters](#fallbacks-filters), [rem](#fallbacks-rem), [pseudoElements](#fallbacks-pseudoelements)
  * optimizers: [import](#optimizers-import), [minifier](#optimizers-minifier), [mqpacker](#optimizers-mqpacker)
  * [sourcemaps](#sourcemaps)


  ###fallbacks.autoprefixer

  Adds support for [Autoprefixer 2.0.0](https://github.com/ai/autoprefixer) that **add vendor prefixes to CSS**. From Autoprefixer options, you can specify the browsers you want to target in your project:

  * `last 2 versions` is last versions for each browser
  * `last 2 Chrome versions` is last versions of the specified browser.
  * `> 5%` is browser versions, selected by global usage statistics.
  * `Firefox > 20` is Firefox versions newer than 20.
  * `Firefox >= 20` is Firefox version 20 or newer.
  * `ios 7` to set browser version directly.
  * `none` clean CSS from any vendor prefixes.

  For example:

  ```javascript
  // .pleeeaserc file (remove comment)
  {
    "fallbacks": {
      "autoprefixer": ["last 4 versions", "Android 2.3"]
    }
  }
  ```

  Autoprefixer converts this file:

  ```css
  .element {
    display: flex;
    flex-direction: column;
    background: linear-gradient(red, blue);
  }
  ```

  To this one:

   ```css
  .element {
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
    background: -webkit-gradient(linear, left top, left bottom, from(red), to(blue));
    background: -webkit-linear-gradient(red, blue);
    background: linear-gradient(red, blue);
  }
  ```

  See [full available options for Autoprefixer on GitHub](https://github.com/ai/autoprefixer#browsers).

  ###fallbacks.variables

  Adds support for a **"not so bad" [CSS variables polyfill](https://github.com/iamvdo/postcss-vars)**. There are no options.

  CSS variables begins with `--` and have to be declared in a `:root` rule. Then, they can be used with the `var(--variable)` notation.

  It converts this file:

  ```css
  :root {
    --color-primary: blue;
  }
  .element {
    color: var(--color-primary);
  }
  ```

  To this one:

  ```css
  :root {
    --color-primary: blue;
  }
  .element {
    color: blue;
  }
  ```

  ###fallbacks.filters

  Converts CSS shorthand filters to SVG equivalents. Uses [pleeease-filters](https://github.com/iamvdo/pleeease-filters).

  It converts this file:

  ```css
  .blur {
    filter: blur(4px);
  }
  ```

  To this one:

  ```css
  .blur {
    filter: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg">&lt;filter id="filter">&lt;feGaussianBlur stdDeviation="4" />&lt;/filter>&lt;/svg>#filter');
    filter: blur(4px);
  }
  ```

  You can also force IE filters with an option:

  ```javascript
  // .pleeeaserc file (remove comment)
  {
    "fallbacks": {
      "filters": { "oldIE": true }
    }
  }
  ```

  Using the first example, you'll get:

  ```css
  .blur {
    filter: url('data:image/svg+xml;utf8,&lt;svg xmlns="http://www.w3.org/2000/svg">&lt;filter id="filter">&lt;feGaussianBlur stdDeviation="4" />&lt;/filter>&lt;/svg>#filter');
    filter: blur(4px);
    filter: progid:DXImageTransform.Microsoft.Blur(pixelradius=4);
  }
  ```

  Then, needed prefixes are added by Autoprefixer. You don't have to care about this.

  **Be careful**, not all browsers support CSS or SVG filters. For your information, latest WebKit browsers support CSS shorthand, Firefox support SVG filters and IE9- support IE filters (limited and slightly degraded). **It means that IE10+, Opera Mini and Android browsers have no support at all**. Moreover, IE filters shouldn't be used.

  ###fallbacks.rem

  Adds support for [pixrem](https://github.com/iamvdo/node-pixrem) that **generates pixel fallbacks for `rem` units**. Add options as an array:

  * first parameter is the root font-size (default `16px`)
  * second parameter is an object with `replace` key set to `true` if you want to replace value. (default `false`)

  ```javascript
  // .pleeeaserc file (remove comment)
  {
    "fallbacks": {
      "rem": ["16px", {"replace": true}]
    }
  }
  ```

  Pixrem converts this file:

  ```css
  .element {
    font-size: 2rem;
  }
  ```

  To this one (with default options):

  ```css
  .element {
    font-size: 32px;
    font-size: 2rem;
  }
  ```

  See [full available options for pixrem on GitHub](https://github.com/iamvdo/node-pixrem#parameters).

  <div class="note">For now, this uses a fork from [pixrem](https://github.com/robwierzbowski/node-pixrem) until the [PR will be accepted or not](https://github.com/robwierzbowski/node-pixrem/pull/10).</div>

  ###fallbacks.pseudoElements

  **Converts pseudo-elements using CSS3 syntax** (two-colons notation like `::after`, `::before`, `::first-line` and `::first-letter`) with the old one, using only one colon (useful for IE8 support). There are no options.

  Converts this file:

  ```css
  .element::after {
    content: '';
  }
  ```

  To this one:
  ```css
  .element:after {
    content: '';
  }
  ```

  ###optimizers.import

  Inlines `@import` styles with relative paths (absolute ones will be unaffected, as the ones including media-queries)

  You can use the CSS syntax you want:

  ```css
  @import "file.css"; /* imported */
  @import url(file.css); /* imported */
  @import url("http://foo.com/bar.css"); /* not imported */
  @import url("file.css") screen and (max-width: 35em); /* not imported */
  ```

  Note that you can set the "root" folder for imported files, even if this is not the root of your project (default is `process.cwd()`). For example, if you compile `css/foo.css` that containing an `@import`, set options like this:

  ```javascript
  // .pleeeaserc file (remove comment)
  {
      "optimizers": {
          "import": "css"
      }
  }
  ```

  ###optimizers.minifier

  Adds support for [CSS Wring](https://github.com/hail2u/node-csswring), **a CSS minifier**. There are no options.

  ###optimizers.mqpacker

  Adds support for [MQ Packer](https://github.com/hail2u/node-css-mqpacker) that **pack same CSS media query rules into one media query rule**. There are no options.

  Mqpacker can convert multiple files like this:

  ```css
  @media (max-width: 36em) {
    .element {
      color: red;
    }
  }
  ```
  ```css
  @media (max-width: 36em) {
    .test {
      color: blue;
    }
  }
  ```

  To this one:

  ```css
  @media (max-width: 36em) {
    .element {
      color: red;
    }
    .test {
      color: blue;
    }
  }
  ```

  ###Sourcemaps

  *Pleeease* supports sourcemaps from CSS (disabled by default). Enabled them in `.pleeeaserc` file:

  ```javascript
  // .pleeeaserc file (remove comment)
  {
      "sourcemaps": true
  }
  ```

  <div class="note">You can also use [sourcemaps from a preprocessor like Sass](workflow.html#with-gulp) (a bit hacky for now).</div>
