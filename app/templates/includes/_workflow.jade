:markdown

  ##Workflows

  ###Node.js

  You can use the `process` function with 2 parameters:

  * `css` is the CSS as string
  * `options` is an object specifying [options you want](options.html)

  It returns fixed CSS as string.

  ```javascript
  var pleeease = require('pleeease'),
      fs       = require('fs');

  var css = fs.readFileSync('app.css', 'utf8');

  // define options here
  var options = {};

  var fixed = pleeease.process(css, options);

  fs.writeFile('app.min.css', fixed, function (err) {
    if (err) {
      throw err;
    }
    console.log('File saved!');
  });
  ```

  ###With Brunch

  If you're using [Brunch](http://brunch.io) (good point), you may want to use [pleeease-brunch](https://github.com/iamvdo/pleeease-brunch).

  Add this plugin as a dependency in your `package.json`

  ```javascript
  {
    "dependencies": {
      "pleeease-brunch": "0.3.x"
    }
  }
  ```

  Or install it:

  ```javascript
  $ npm install --save pleeease-brunch
  ```

  Now, Pleeease-brunch does its job. You can set it in Brunch configuration file, for example:

  ```javascript
  plugins:
    pleeease:
      fallbacks:
        autoprefixer: true
        variables: true
        rem: false
        pseudoElements: false
      optimizers:
        import: true
        minifier: true
        mqpacker: true
        
            
  ```

  Note that pleeease-brunch is an optimizer plugin, so it only works when `optimize: true` is set. The `--production` environment activates optimizers.

  You can also use the [pre-configured Pleeease skeleton](https://github.com/iamvdo/brunch-with-pleeease).

  ###With Gulp, Grunt

  Please, be my guest if you want to use *Pleeease* with Gulp or Grunt, or any other task runner. Contribute!


