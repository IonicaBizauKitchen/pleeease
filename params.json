{"name":"Pleeease","tagline":"Postprocess CSS with ease","body":"Pleeease\r\n======\r\n\r\nPostprocess CSS with ease.\r\n\r\nPleeease is the best toolchain for your CSS. Just write DRY, future-proof CSS and Pleeease do the job for you.\r\n\r\nFor now, it adds prefixes, variables and `rem` unit support, packs same media-query in one `@media` rule and minify it.\r\n\r\nPleeease is based on [PostCSS](https://github.com/ai/postcss) postprocessor.\r\n\r\n##Example\r\n\r\nYou write `foo.css`:\r\n\r\n```css\r\n:root {\r\n\t--color-primary: red;\r\n\t--color-secondary: blue;\r\n}\r\n.elem {\r\n\tfont-size: 2rem;\r\n\tcolor: red;\r\n\tbackground: var(--color-primary);\r\n\twidth: calc(100% - 50px);\r\n}\r\n@media screen and (min-width: 36em) {\r\n\t.elem {\r\n\t\tcolor: var(--color-secondary)\r\n\t}\r\n}\r\n@media screen and (min-width: 36em) {\r\n\t.classe {\r\n\t\tbackground: linear-gradient(green, blue);\r\n\t}\r\n}\r\n```\r\n\r\nYou get `bar.css` (with all options set to `true`, except `minifier`)\r\n\r\n```css\r\n:root {\r\n\t--color-primary: red;\r\n\t--color-secondary: blue;\r\n}\r\n.elem {\r\n\tfont-size: 32px;\r\n\tfont-size: 2rem;\r\n\tcolor: red;\r\n\tbackground: red;\r\n\twidth: -webkit-calc(100% - 50px);\r\n\twidth: calc(100% - 50px);\r\n}\r\n@media screen and (min-width: 36em) {\r\n\t.elem {\r\n\t\tcolor: blue\r\n\t}\r\n\t.classe {\r\n\t\tbackground: -webkit-gradient(linear, left top, left bottom, from(green), to(blue));\r\n\t\tbackground: -webkit-linear-gradient(green, blue);\r\n\t\tbackground: linear-gradient(green, blue);\r\n\t}\r\n}\r\n```\r\n\r\n##Installation\r\n\r\n\t$ npm install pleeease\r\n\r\n##Usage\r\n\r\n###Programmatic\r\n\r\n```javascript\r\nvar pleeease = require('pleeease'),\r\n\tfs       = require('fs');\r\n\r\nvar css = fs.readFileSync('app.css', 'utf8');\r\n\r\n// define options here\r\nvar options = {};\r\n\r\nvar fixed = pleeease.process(css, options);\r\n\r\nfs.writeFile('app.min.css', fixed, function (err) {\r\n  if (err) {\r\n    throw err;\r\n  }\r\n  console.log('File saved!');\r\n});\r\n```\r\n\r\n###CLI\r\n\r\nInstall Pleeease globally\r\n\r\n\t$ npm install -g pleeease\r\n\r\nOr use alternate syntax\r\n\r\n\t$ node ./bin/pleeease\r\n\r\nCompile all CSS files from the root projet to `app.min.css`\r\n\r\n\t$ pleeease compile\r\n\t$ pleeease compile *.css to app.min.css\r\n\r\nCompile `foo.css` to `bar.css`\r\n\r\n\t$ pleeease compile foo.css to bar.css\r\n\r\nCompile multiple files to `app.min.css`\r\n\r\n\t$ pleeease compile foo.css bar.css\r\n\r\nCompile `css/` folder to `public/css/app.min.css` (if folders doesn't exist, they will be created)\r\n\r\n\t$ pleeease compile css/ to public/css/app.min.css\r\n\r\nYou can also `watch` (with the same syntax) for live compilation.\r\n\r\n\t$ pleeease watch foo.css\r\n\r\nPleeease options can be set in a `.pleeeaserc` file (JSON-like), for example:\r\n\r\n```javascript\r\n{\r\n\t\"input\": [\"foo.css\"],\r\n\t\"output\": \"bar.css\",\r\n\t\"autoprefixer\": true,\r\n\t\"minifier\": false\r\n}\r\n```\r\n\r\n* `input` is an array of files (default `[*.css]`)\r\n* `output` is the path to the compiled file (default `app.min.css`)\r\n\r\nFor other options, see below.\r\n\r\n###With Brunch\r\n\r\nIf you're using [Brunch](http://brunch.io), see [pleeease-brunch](https://github.com/iamvdo/pleeease-brunch)\r\n\r\n##Options\r\n\r\nThese are the default options for now:\r\n\r\n* `autoprefixer`: `true`\r\n* `minifier`: `true`\r\n* `mqpacker`: `true`\r\n* `fallbacks`:\r\n\t* `variables`: `true`\r\n\t* `rem`: `true`\r\n\r\nAll options can be disabled with `false` keyword or modified using each postprocessor options.\r\n\r\n###autoprefixer\r\n\r\nAdd support for [Autoprefixer](https://github.com/ai/autoprefixer) that add vendor prefixes to CSS. Add options as an array:\r\n\r\n```javascript\r\n// set options\r\nvar options = {\r\n\tautoprefixer: ['last 4 versions', 'Android 2.3']\r\n}\r\n```\r\n\r\n```javascript\r\n// .pleeeaserc file\r\n{\r\n\t\"autoprefixer\": [\"last 4 versions\", \"Android 2.3\"]\r\n}\r\n```\r\n\r\nSee [available options for Autoprefixer](https://github.com/ai/autoprefixer#browsers).\r\n\r\n###minifier\r\n\r\nAdd support for [CSS Wring](https://github.com/hail2u/node-csswring), a CSS minifier. There are no options.\r\n\r\n###mqpacker\r\n\r\nAdd support for [MQ Packer](https://github.com/hail2u/node-css-mqpacker) that pack same CSS media query rules into one media query rule. There are no options.\r\n\r\n###fallbacks.variables\r\n\r\nAdd support for a \"not so bad\" [CSS variables polyfill](https://github.com/iamvdo/postcss-vars). There are no options.\r\n\r\n###fallbacks.rem\r\n\r\nAdd support for [pixrem](https://github.com/iamvdo/node-pixrem) that generates pixel fallbacks for rem units. Add options as an array:\r\n\r\n```javascript\r\n// set options\r\nvar options = {\r\n\tfallbacks: {\r\n\t\trem: ['16px', {replace: true}]\r\n\t}\r\n}\r\n```\r\n\r\n```javascript\r\n// .pleeeaserc file\r\n{\r\n\t\"fallbacks\": {\r\n\t\t\"rem\": [\"16px\", {\"replace\": true}]\r\n\t}\r\n}\r\n```\r\n\r\nSee [available options for pixrem](https://github.com/iamvdo/node-pixrem#parameters).\r\n\r\nFor now, this uses a fork from [pixrem](https://github.com/robwierzbowski/node-pixrem) until the [PR will be accepted or not](https://github.com/robwierzbowski/node-pixrem/pull/10).\r\n\r\n##More\r\n\r\nMore postprocess tasks are coming, mainly polyfills (eg. CSS filters, pseudo-classes/pseudo-elements, rgba/hsla functions, etc.).\r\n\r\n##Licence\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}